name: Candidate Versioning

on:
  workflow_call:
    inputs:
      branch:
        description: 'The branch where the candidate versioning will be executed'
        type: string
        required: false
        default: 'main'
      majorList:
        description: 'List of the nouns that will be considered as major version'
        type: string
        required: false
        default: 'BREAKING CHANGE, BREAKING, MAJOR'
      minorList:
        description: 'List of the nouns that will be considered as minor version'
        type: string
        required: false
        default: 'FEATURE, Feature, feature, FEAT, Feat, feat'
      patchList:
        description: 'List of the nouns that will be considered as patch version'
        type: string
        required: false
        default: 'FIX, Fix, fix, FIXED, Fixed, fixed, Refactor, Refact, Refac, refac, refact, refactor, REFAC, REFACT, REFACTOR, refacs, refacts, refactors, REFACS, REFACTS, REFACTORS, config, conf, configs, confs, cofiguration, cofigurations, configure, doc, docs, docu, document, documentation, dependencies, dependencie, depends, depend, deps, dep, chore, build, rebuild, build(deps), build(deps-dev), ci, CI, test, tests, testing, wip, WIP, Wip'
    secrets:
      github-token:
        description: 'The Github token'
        required: true
    outputs:
      current:
        description: 'The current version'
        value: ${{ jobs.versioning.outputs.current }}
      next-patch:
        description: 'The next version with format v0.0.0'
        value: ${{ jobs.versioning.outputs.next-patch }}
      next-minor:
        description: 'The minor version with format v0.0'
        value: ${{ jobs.versioning.outputs.next-minor }}
      next-major:
        description: 'The major version with format v0'
        value: ${{ jobs.versioning.outputs.next-major }}
      candidate:
        description: 'The candidate tag'
        value: ${{ jobs.versioning.outputs.candidate }}

env:
  GH_TOKEN: ${{ secrets.github-token || secrets.GH_PROJECT_AUTOMATION  ||  secrets.GITHUB_TOKEN }} 

jobs:
  versioning:
    name: Candidate Versioning
    runs-on: ubuntu-latest
    permissions:
      contents: write
    outputs:
      current: ${{ steps.semver.outputs.current }}
      next-patch: ${{ steps.semver.outputs.next }}
      next-minor: ${{ steps.push.outputs.minor }}
      next-major: ${{ steps.push.outputs.major }}
      candidate: ${{ steps.candidate.outputs.CANDIDATE_TAG }}
    steps:
      - name: Set up repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          ref: ${{ github.ref }}
          token: ${{ secrets.github-token || secrets.GH_PROJECT_AUTOMATION  ||  secrets.GITHUB_TOKEN }} 

      - name: Configure git
        run: |
          git config --global user.email "matchingtool@cedeira.com.ar"
          git config --global user.name "Matching Tool"

      - name: Create release branch
        id: release_branch
        run: |
          #!/bin/sh

          # if release branch already exists, checkout the branch
          if git checkout RC-${{ github.head_ref }}; then
            echo "Release branch already exists. Checking out the existing branch."
          else
            echo "Creating new release branch."
            # Create a new branch for the release
            git checkout -b RC-${{ github.head_ref }}
            git push origin RC-${{ github.head_ref }}
          fi

      - name: Merge last PR commit
        id: merge_pr
        run: |
          #!/bin/sh

          # Merge the last commit into the release branch
          git merge --no-ff origin/${{ github.head_ref }} -m "Merge last commit from PR #${{ github.event.number }} into release branch"

      - name: Fetch all tags
        run: git fetch --tags

      - name: Get next version
        id: semver
        uses: ietf-tools/semver-action@v1
        with:
          token: ${{ secrets.github-token || secrets.GH_PROJECT_AUTOMATION || secrets.GITHUB_TOKEN }}
          branch: ${{ github.head_ref }}
          majorList: ${{ github.event.inputs.majorList || 'BREAKING CHANGE, BREAKING, MAJOR' }}
          minorList: ${{ github.event.inputs.minorList || 'FEATURE, Feature, feature, FEAT, Feat, feat' }}
          patchList: ${{ github.event.inputs.patchList || 'FIX, Fix, fix, FIXED, Fixed, fixed, Refactor, Refact, Refac, refac, refact, refactor, REFAC, REFACT, REFACTOR, refacs, refacts, refactors, REFACS, REFACTS, REFACTORS, config, conf, configs, confs, cofiguration, cofigurations, configure, doc, docs, docu, document, documentation, dependencies, dependencie, depends, depend, deps, dep, chore, build, rebuild, build(deps), build(deps-dev), ci, CI, test, tests, testing, wip, WIP, Wip' }}
          patchAll: true
          skipInvalidTags: true
          maxTagsToFetch: 100
          tagFilter: "^v\\d+\\.\\d+\\.\\d+$"

      - name: Generate candidate tag
        id: candidate
        run: |
          #!/bin/sh

          # List all existing RC tags for this PR
          existing_tags=$(git tag | grep -E "^${{ steps.semver.outputs.next }}-rc\.${{ github.event.number }}\.[0-9]+$" || true)

          if [ -z "$existing_tags" ]; then
            # No existing tags â€” start from 1
            build_number=1
          else
            # Extract highest existing build number
            build_number=$(echo "$existing_tags" | sed -E "s/^${{ steps.semver.outputs.next }}-rc\.${{ github.event.number }}\.//" | sort -n | tail -1)
            build_number=$(expr "$build_number" + 1)
          fi

          # Generate the candidate tag
          candidate="${{ steps.semver.outputs.next }}-rc.${{ github.event.number }}.${build_number}"

          # Output the candidate tag
          echo "Generated candidate tag: $candidate"
          echo "CANDIDATE_TAG=$candidate" >> "$GITHUB_OUTPUT"

      - name: Scan versioning sources
        id: scan
        run: |
          #!/bin/sh

          # Find the version.txt file
          versionTxt=$(find . -name version.txt)

          # Find the package.json file
          packageJson=$(find . -name package.json)

          # Find the .csproj files
          csproj=$(find . -name "*.csproj")


          # Export VERSION_TXT
          echo "VERSION_TXT<<EOF" >> $GITHUB_ENV
          echo "$versionTxt" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV

          # Export VERSION_PACKAGE_JSON
          echo "VERSION_PACKAGE_JSON<<EOF" >> $GITHUB_ENV
          echo "$packageJson" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV

          # Export VERSION_CSPROJ
          echo "VERSION_CSPROJ<<EOF" >> $GITHUB_ENV
          echo "$csproj" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV

      - name: Update version number in version.txt
        if: env.VERSION_TXT != ''
        run: |
          #!/bin/bash

          # update the version for each file
          sed -i "s/.*$/${{ steps.candidate.outputs.CANDIDATE_TAG }}/g" $(find . -name 'version.txt')

      - name: Update version number in package.json
        if: env.VERSION_PACKAGE_JSON != ''
        run: |
          #!/bin/bash

          # update the version for each file found
          sed -i "s/\"version\": \".*\"/\"version\": \"${{ steps.candidate.outputs.CANDIDATE_TAG }}\"/g" $(find . -name 'package.json')

      - name: Update version number in .Net projects
        if: env.VERSION_CSPROJ != ''
        run: |
          #!/bin/bash

          # find all .csproj files and store them in a variable for iteration
          files=()
          while IFS= read -r -d $'\0' file; do
            files+=("$file")
          done < <(find . -name "*.csproj" -print0)

          versionWithoutPrefix=$(echo "${{ steps.candidate.outputs.CANDIDATE_TAG }}" | sed 's/v//g')
          
          # iterate over each file
          for file in "${files[@]}"; do
            echo "Procesando archivo: $file"
            sed -i "s/<Version>.*<\/Version>/<Version>$versionWithoutPrefix<\/Version>/g" "$file"
          done

      - name: Amend & Push changes
        if: ${{ env.VERSION_TXT != '' || env.VERSION_PACKAGE_JSON != '' || env.VERSION_CSPROJ != '' }}
        run: |
          git add .
          git commit --amend --no-edit
          git push --force --set-upstream origin HEAD
      
      - name: Push tags
        id: push
        run: |
          #!/bin/sh

          # Set new tags and force update
          git tag ${{ steps.candidate.outputs.CANDIDATE_TAG }}
          git push --tag